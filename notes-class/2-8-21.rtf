{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid103\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww15660\viewh27080\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 LECTURE 3 NOTES- HES CS 118 BLOCKCHAIN\
Class 3\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\fs32 \cf0 2/8/21\
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 PUBLIC / PRIVATE KEY PAIR NOTES
\f1\b0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Public / Private Key Pairs
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 You generate a pair of them (public / private)\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 You can take any data (ex. Message/text), and use the private key to create an encrypted version of the data (ex. \ul Message Signature\ulnone  or \ul Cipher Text\ulnone )\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Public Keys\ulnone  (verifying key)
\f1\b0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Used with \ul Message Signature\ulnone  to verify that message\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Private Keys\ulnone  (signing key)
\f1\b0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Like a password. Don\'92t show this to anyone. \
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Used to create \ul Digital Signatures\ulnone \
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Used to encrypt data / create a \ul Message Signature\ulnone )\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Message Signature
\f1\b0  (Cipher Text)\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Encrypted output of data using Private Key\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Example:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Bob wants to send $20 from his public key address abc123 to Harry\'92s address of xyz456\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Bob will \'93sign\'94 this transaction which means he\'92ll use his private key (in isolation/on his computer) to generate the Message Signature (ex. ad29xka)\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Bob will then attach the Message Signature, to the transaction data (amount/his public key/recipient public key), and broadcast this info to the blockchain\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 once the transaction is published to the public blockchain, the transaction contains 1-the amount $20, 2-the sender\'92s Public Key Bob, 3-the recipients Public Key, and 4-the Message Signature. \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 That unverified transaction will go to a public data structure that contains a bunch of other unverified transactions\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Now miners will take a bunch of these transactions, put them into a block and mine them.\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Mining involves verifying the transaction by running the data through some function with the the sender Bob\'92s Public Key to verify the signature and that proves that Bob sent that transaction and not someone else. \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
GENERAL CRYPTOGRAPHY NOTES
\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 \ul \ulc0 ENCRYPTION
\f0\b \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Process of protecting data\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Plain Text
\f1\b0 \ulnone  (unprotected/unencrypted data you want to protect)\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Encryption takes Plain Text, and uses a \ul Cipher\ulnone  to create an output (\ul Cipher Text\ulnone )\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Cipher
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Algorithm to protect data (ex. Caesar Cipher)\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Cipher Text\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Output of Cipher function / encrypted / protected data\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 This process is reversible (unlike a Hash Function)\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Quick to Encrypt / Decrypt\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Computationally difficult to guess the \ul Key\ulnone \
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Symmetric Key Cryptography
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Uses one \ul Key\ulnone \
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Same key used to encrypt / decrypt\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Ex. If Bob sends a message to Harry, both need the same key (shared secret)\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Not very useful for blockchain? \
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Ex. HTTPS is an example of AES (Advanced Encryption Standard) Symmetric Key Cryptography\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Asymmetric Cryptography\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Uses two Keys: Public / Private Key Pair\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Public Key known to everyone, Private Key known only to you\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Ex 1 Secret Messages:
\f0\b \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Bob wants to send a secret message to Alice
\f0\b \
\ls2\ilvl2
\f1\b0\fs24 {\listtext	\uc0\u8259 	}
\fs32 Bob takes Alice\'92s Public Key, and encrypts the message (generates a Cipher Text)\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Bob sends Cipher Text to Alice\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Alice decrypts the message using her Private Key
\f0\b  \
\ls2\ilvl2
\f1\b0\fs24 {\listtext	\uc0\u8259 	}
\fs32 Not really useful for block chain (could be used for health records)
\f0\b \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 \ul ECDSA (Elliptical Curve Digital Signature Algorithm)\ulnone - Asymmetric scheme that Bitcoin/Ethereum uses.\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Ex 2 Digital Signatures (used for verifying who sent something)\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Bob wants to know the message that Alice sent him  is actually from Alice\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Alice takes her Private Key and uses it to create a Digital Signature (Encrypted version of the Plain Text)\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Alice then sends the original data (plain text) and the Digital Signature to Bob\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Bob then takes Alice\'92s Public Key (which everyone knows) to decrypt the Digital Signature, and if the decrypted Digital Signature matches the original Plain Text then he has verified that the message has come from Alice\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Non-Repudiation\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Ex. Alice can\'92t deny the message is from her\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Message Integrity\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Ex. Bob knows the message contents were unchanged because if they were changed, the digital signature would not match the original message\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Elliptic Curve Cryptography (ECC)\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Key/Pair Algorithm used by Bitcoin and Ethereum\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Based on discrete logarithm problem
\f0\b \
\ls2\ilvl1
\f1\b0\fs24 {\listtext	\uc0\u8259 	}
\fs32 Step 1: generate a pseudo-random 256 bit number to get private key\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Then run that random number through a hash function to get a private key\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Step 2:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Use private key to find point on an elliptic curve\
\ls2\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Easy to find, given a point on the curve, infeasible to go back and find the private key\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul secp256k1
\f1\b0 \ulnone  = used on Ethereum blockchain\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul P2PKH\ulnone  
\f1\b0 = one of the address formats that bitcoin uses\
\ls2\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Base58Check\ulnone  
\f1\b0 Encoding- what bitcoin uses\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Step 1: prefix Vernon byte to data?\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Step 2: \ul SHA256 squared\ulnone  of data with prefix\
\ls2\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Step 3: \'85
\f0\b \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Note* Payload in lecture slides p. 22 refer to the public key\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Bitcoin Address\ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls3\ilvl1
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Not the same as a public key!\
\ls3\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Public key is used to generate the bitcoin address\
\ls3\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Can\'92t reverse a bitcoin address to get a public key, and even if you could, you can\'92t reverse it to get the private key (but its okay if others know the public key)\
\ls3\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 See helpful picture on slide pg. 22\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\
\uc0\u8232 QUESTIONS\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls4\ilvl0
\f1\b0\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Digital Signatures?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 For bitcoin, are Public Keys the same as Wallet Addresses?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Are bitcoin public/private keys always alpha numeric? How long are they? Why alphanumeric? Why are they that long?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 How do miners choose which transactions to verify from the unverified transaction pool? (Random, FIFO?)\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 What is a Key? How is it generated?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Why is symmetric key cryptography not useful for blockchain?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Still don\'92t understand the Elliptic Curve \
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Is the elliptic curve exactly the same as in the slides (or does it differ on each use/transaction for ethereum/bitcoin)?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Do we have to understand all of the Elliptic Curve Math for this course?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 Bitcoin Address same as a Wallet Address?\
\ls4\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs30 \
}