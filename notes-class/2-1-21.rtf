{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww15660\viewh27080\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 LECTURE 2 NOTES- HES CS 118 BLOCKCHAIN\
\pard\pardeftab560\slleading20\partightenfactor0

\fs32 \cf0 2/1/21
\fs24 \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 CLASS NOTES
\f1\b0\fs30 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs30 \ul preimage
\f1\b0 \ulnone  (message) = input to hash function. Can be any size\
\ls1\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs30 \ul image
\f1\b0 \ulnone  (message digest, hash) = output of hash function. Fixed size (ex. 256bits)
\fs24 \
\ls1\ilvl0{\listtext	\uc0\u8259 	}
\f0\b\fs30 \ul Cryptographic Hash Functions
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs30 \ul Deterministic
\f1\b0 \ulnone . Ex a => 123 a will always return 123\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\f0\b\fs30 \ul Computationally efficient\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\f1\b0\fs24 \cf0 \ulnone {\listtext	\uc0\u8259 	}
\fs30 easy/quick to cpmute (sometimes intentionally not quick like b crypt)
\f0\b \ul \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\f1\b0\fs24 \cf0 \ulnone {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Preimage Resistance (irreversibility)
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 given an output of a has function, it is \'93very difficult\'94 to find the original inputs of the hash function\
\ls1\ilvl2
\fs24 {\listtext	\uc0\u8259 	}
\fs32 ? How do we quantify how difficult it is to find the inputs?\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Second Preimage Resistence
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 given input x that outputs y, it\'92s very difficult to find another input z that leads the same output of x \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Collision Resistance 
\f1\b0 \ulnone (strong form of second preimage resistance)\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 can\'92t find any outputs that collide (ex. hard to find any two humans with matching fingerprints)\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul Non-Correlation (Avalanche effect)
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl2
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 if input is changed by a little, the output should change drastically\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\f0\b\fs32 \ul SHA-256
\f1\b0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 Secure Hash Algorithm designed by NSA\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 used by Bitcoin squared SHA256( SHA256(x) )\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs32 produces 256 Bit Hash Value\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs32 The longest chain always wins (can\'92t just strip off one public and publish that as the true block)\
\ls1\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Proof Of Work (invented for spam email)\
\ls1\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 Satoshi Nakamoto \
\ls1\ilvl0
\fs24 {\listtext	\uc0\u8259 	}
\fs32 \
}